import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;

import ne¡t.htmlparser.jericho.Element;
import net.htmlparser.jericho.HTMLElementName;
import net.htmlparser.jericho.Source;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'useruser' at '16. 2. 8 오후 4:33' with Gradle 2.6
 *
 * @author useruser, @date 16. 2. 8 오후 4:33
 */
public class Library {

	public static List<Member> members = new ArrayList<Member>();
	public static List<MemberWork> memberWorks = new ArrayList<MemberWork>();

	public static void main(String[] args) throws Exception {

		String uri = "http://watch.peoplepower21.org/New/search.php";

		InputStream is = new URL(uri).openStream();
		Source source = new Source(new InputStreamReader(is, "utf-8"));
		source.fullSequentialParse();

		List<Element> tables = source.getAllElements(HTMLElementName.TABLE);
		List<Element> tds = tables.get(19).getAllElements(HTMLElementName.TD);
		for (Element td : tds) {
			boolean isTextEmpty = td.getTextExtractor().toString().isEmpty();
			boolean hasURI = !td.getURIAttributes().isEmpty();
			if (!isTextEmpty && hasURI) {
				String href = td.getURIAttributes().get(0).getValue();
				String title = td.getTextExtractor().toString();

				// #################### 기본정보 ####################
				String depth1Uri;
				if (href.contains("New")) {
					depth1Uri = "http://watch.peoplepower21.org/" + href;
				} else {
					depth1Uri = "http://watch.peoplepower21.org/New/" + href;
				}
				// scrape2Member(depth1Uri);
				scrape2Activity(depth1Uri);
//				break;
			}
		}
		// generateMemberCSVFile(members);
		 generateMemberWorkCSVFile(memberWorks);
		System.out.println("작업이 완료되었습니다.");
	}

	private static void scrape2Activity(String depth1Uri) throws Exception {
		// #################### 의정활동 ####################
		String depth3Uri = depth1Uri + "&info_page=cm_info_act_abstract.php";
		InputStream depth3Is = new URL(depth3Uri).openStream();
		Source depth3Source = new Source(new InputStreamReader(depth3Is, "utf-8"));
		depth3Source.fullSequentialParse();
		List<Element> depth3Tables = depth3Source.getAllElements(HTMLElementName.TABLE);
		// 본회의출석부
		String mainSessionAttendance = depth3Tables.get(25).getAllElements(HTMLElementName.TD).get(1)
				.getAllElements(HTMLElementName.A).get(0).getContent().toString().trim().replaceAll(",", "/");

		// 본회의 투표
//		String mainVote = depth3Tables.get(26).getAllElements(HTMLElementName.TD).get(0)
//				.getAllElements(HTMLElementName.A).get(0).getContent().toString().trim().replace("<b>", "")
//				.replace("</b>", "").replaceAll(",", "/");

		// 법안 대표발의
		String billProposal = depth3Tables.get(28).getAllElements(HTMLElementName.TD).get(0)
				.getAllElements(HTMLElementName.A).get(0).getContent().toString().trim().replace("<b>", "")
				.replace("</b>", "").replaceAll(",", "/");
		// 상임위출석부
		String subSessionAttendance = depth3Tables.get(30).getAllElements(HTMLElementName.TD).get(1).getContent()
				.toString().trim().replaceAll(",", "/");

		MemberWork work = new MemberWork(mainSessionAttendance, subSessionAttendance, billProposal);
		memberWorks.add(work);
	}

	private static void generateMemberWorkCSVFile(List<MemberWork> works) throws Exception {
		List<String> lines = new ArrayList<>();
		lines.add("main_session_attendance,sub_session_attendance,bill_proposal");
		for (MemberWork w : works) {
			String line = w.getMainSessionAttendance() + "," + w.getSubSessionAttendance() + "," + w.getBillProposal();
			System.out.println(line);
			lines.add(line);
		}
		Path file = Paths.get("member_work.csv");
		Files.write(file, lines, Charset.forName("UTF-8"));
	}

	private static void scrape2Member(String depth1Uri) throws Exception {
		InputStream depth1Is = new URL(depth1Uri).openStream();
		Source depth1Source = new Source(new InputStreamReader(depth1Is, "utf-8"));
		depth1Source.fullSequentialParse();

		List<Element> depth1Tables = depth1Source.getAllElements(HTMLElementName.TABLE);

		List<Element> memberTds = depth1Tables.get(16).getAllElements(HTMLElementName.TD);
		String imgSrc = "http://watch.peoplepower21.org" + memberTds.get(0).getURIAttributes().get(1).getValue().trim();
		// 이름
		String name = memberTds.get(6).getTextExtractor().toString().trim().replaceAll(",", "/");

		String tmp = memberTds.get(9).getTextExtractor().toString().trim().replaceAll(",", "/");
		// 정당
		String party = tmp.split("/")[0].replaceAll(",", "/");
		// 지역
		String location = tmp.split("/")[1].replaceAll(",", "/");
		// 선
		String rank = tmp.split("/")[2].replaceAll(",", "/");
		// 상임위
		String department = memberTds.get(11).getTextExtractor().toString().trim().replaceAll(",", "/");
		// 주소
		String address = memberTds.get(13).getTextExtractor().toString().trim().replaceAll(",", "/");
		// 이메일
		String email = memberTds.get(15).getTextExtractor().toString().trim().replaceAll(",", "/");
		// 홈페이지
		String homepage = memberTds.get(17).getTextExtractor().toString().trim().replaceAll(",", "/");

		String depth2Uri = depth1Uri + "&info_page=cm_info_private.php";
		InputStream depth2Is = new URL(depth2Uri).openStream();
		Source depth2Source = new Source(new InputStreamReader(depth2Is, "utf-8"));
		depth2Source.fullSequentialParse();

		List<Element> depth2Tables = depth2Source.getAllElements(HTMLElementName.TABLE);
		List<Element> detailTds = depth2Tables.get(24).getAllElements(HTMLElementName.TD);
		// 출생
		String birth = detailTds.get(1).getTextExtractor().toString().trim().replaceAll(",", "/");
		// 학력 경력
		String carrer = detailTds.get(3).getContent().toString().trim().replaceAll(",", "/");
		// 병역
		String military;
		try {
			military = detailTds.get(6).getContent().toString().trim().replaceAll(",", "/");
		} catch (IndexOutOfBoundsException e) {
			military = "";
		}
		// 전과
		String crime;
		try {
			crime = detailTds.get(8).getContent().toString().trim().replaceAll(",", "/");
		} catch (IndexOutOfBoundsException e) {
			crime = "";
		}

		// 이미지 URI 를 파일로 다운로드
		// ImageSaver.getInstance().saveImage(imgSrc, name + ".png");

		Member m = new Member(name, party, location, rank, department, address, email, homepage, birth, carrer,
				military, crime);
		members.add(m);
	}

	private static void generateMemberCSVFile(List<Member> members) throws Exception {
		List<String> lines = new ArrayList<>();
		lines.add("name,party,location,rank,department,address,email,homepage,birth,carrer,military");
		for (Member m : members) {
			String line = m.getName() + "," + m.getParty() + "," + m.getLocation() + "," + m.getRank() + ","
					+ m.getDepartment() + "," + m.getAddress() + "," + m.getEmail() + "," + m.getHomepage() + ","
					+ m.getBirth() + "," + m.getCarrer() + "," + m.getMilitary();
			System.out.println(line);
			lines.add(line);
		}
		Path file = Paths.get("member.csv");
		Files.write(file, lines, Charset.forName("UTF-8"));
	}

	public boolean someLibraryMethod() {
		return true;
	}
}
